{"version":3,"sources":["components/InfoPanel.js","components/MainMap.js","App.js","serviceWorker.js","index.js"],"names":["alternatives","InfoPanel","_this","this","react_default","a","createElement","control_default","position","className","Form","Control","as","defaultValue","props","currentAlternative","onChange","event","changeAlternative","target","value","map","alt","key","Component","colorDefinitions","OG-NoSale","OG-NSO","OG-CSU","OG-TL","OG-SaleSTC","MainMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","zoom","featureStyle","bind","assertThisInitialized","feature","styles","fillOpacity","color","properties","designation","fillColor","programArea","GeoJSON","data","style","baseMapStyle","filter","showFeature","filterUpdateKey","Map","center","id","TileLayer","url","attribution","components_InfoPanel","keys","Fragment","background","App","loadProgramArea","loadAlternatives","triggerFilterUpdate","setState","newAlt","fetch","response","json","c","default","console","log","_context","t0","altsData","resp1","resp2","resp3","resp4","_context2","src_components_MainMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc055e76.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Control from 'react-leaflet-control';\nimport { Form} from 'react-bootstrap';\n\nconst alternatives = [\"Alternative B\", \"Alternative C\", \"Alternative D1\", \"Alternative D2\"];\n\nclass InfoPanel extends Component {\n  render() {\n    return (\n      <Control position=\"topright\" className=\"info\">\n        <h4>Proposed Alternative: </h4>\n        <Form.Control as=\"select\" defaultValue={this.props.currentAlternative} onChange={(event) => { this.props.changeAlternative(event.target.value); }}>\n          { alternatives.map((alt) => (<option key={alt}>{alt}</option>)) }\n        </Form.Control>\n      </Control>\n    );\n  }\n}\nexport default InfoPanel;\n","import React, {Component} from \"react\";\nimport {Map, TileLayer, GeoJSON} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\nimport InfoPanel from './InfoPanel.js';\nimport \"./MainMap.css\";\n\nconst colorDefinitions = {\n  \"OG-NoSale\": \"#7fc97f\",\n  \"OG-NSO\": \"#beaed4\",\n  \"OG-CSU\": \"#fdc086\",\n  \"OG-TL\": \"#ffff99\",\n  \"OG-SaleSTC\": \"#f0027f\",\n}\n\nclass MainMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      position: [69.85, -144],\n      zoom: 8,\n    };\n\n    this.featureStyle = this.featureStyle.bind(this);\n  }\n\n  featureStyle(feature) {\n    var styles = {\n      fillOpacity: \"0.9\",\n      color: \"rgb(49, 130, 189)\",\n    };\n    var color = colorDefinitions[feature.properties.designation];\n    styles.fillColor = color;\n    return styles;\n  }\n\n  baseMapStyle(feature) {\n    return {\n      color: \"rgb(49, 130, 189)\",\n      fillColor: null,\n      fillOpacity: 0\n    };\n  }\n\n  render() {\n    var programArea;\n    if (this.props.programArea) {\n      programArea = <GeoJSON data={this.props.programArea} style={this.baseMapStyle} />;\n    }\n\n    var alternatives;\n    if (this.props.currentAlternative && this.props.alternatives) {\n      alternatives = (\n        <GeoJSON\n          data={this.props.alternatives[this.props.currentAlternative]}\n          filter={this.showFeature}\n          key={this.props.filterUpdateKey}\n          style={this.featureStyle}\n        />\n      );\n    }\n\n    return (\n      <Map center={this.state.position} zoom={this.state.zoom} id=\"mapid\">\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"test\"\n        />\n        {programArea}\n        {alternatives}\n        <InfoPanel currentAlternative={this.props.currentAlternative} changeAlternative={this.props.changeAlternative} />\n        <Control position=\"bottomright\" className=\"info legend\">\n          { Object.keys(colorDefinitions).map((designation) => (\n            <React.Fragment key={designation}>\n              <i style={{background:colorDefinitions[designation]}} />\n              { designation }\n              <br />\n            </React.Fragment>\n          ))}\n        </Control>\n      </Map>\n    );\n  }\n}\n\nexport default MainMap;\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport MainMap from \"./components/MainMap.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      programArea: null,\n      alternatives: null,\n      currentAlternative: \"Alternative B\",\n      filterUpdateKey: 0\n    };\n    this.loadProgramArea();\n    this.loadAlternatives();\n    this.triggerFilterUpdate = this.triggerFilterUpdate.bind(this);\n    this.changeAlternative = this.changeAlternative.bind(this);\n  }\n\n  triggerFilterUpdate() {\n    this.setState({\n      filterUpdateKey: this.state.filterUpdateKey + 1\n    });\n  }\n\n  changeAlternative(newAlt) {\n    this.setState({\n      currentAlternative: newAlt,\n      filterUpdateKey: this.state.filterUpdateKey + 1\n    });\n  }\n\n  async loadProgramArea() {\n    try {\n      const response = await fetch(\"./data/CoastalPlain_ProgramArea.json\");\n      const c = await response.json();\n      this.setState({\n        programArea: c.default,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async loadAlternatives() {\n    try {\n      var altsData = {};\n      var resp1 = await fetch(\"./data/alternative_b.json\");\n      altsData[\"Alternative B\"] = await resp1.json();\n      var resp2 = await fetch(\"./data/alternative_c.json\");\n      altsData[\"Alternative C\"] = await resp2.json();\n      var resp3 = await fetch(\"./data/alternative_d1.json\");\n      altsData[\"Alternative D1\"] = await resp3.json();\n      var resp4 = await fetch(\"./data/alternative_d2.json\");\n      altsData[\"Alternative D2\"] = await resp4.json();\n      this.setState({\n        alternatives: altsData\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainMap\n          programArea={this.state.programArea}\n          alternatives={this.state.alternatives}\n          currentAlternative={this.state.currentAlternative}\n          filterUpdateKey={this.state.filterUpdateKey}\n          changeAlternative={this.changeAlternative}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}